# security_middleware.py
"""
üö® MIDDLEWARE DE SEGURAN√áA CR√çTICA
Protege TODAS as rotas contra vazamento de dados entre usu√°rios.
"""

from flask import g, session, current_app, abort, request
from functools import wraps
import time

def get_current_user_id():
    """
    SEGURAN√áA CR√çTICA: Retorna user_id da sess√£o (profiles).
    CONSISTENTE: Usa o mesmo ID gerado no login.
    """
    # Verificar se usu√°rio est√° logado
    from utils import is_logged
    if not is_logged():
        return None

    user = session.get("user", {})
    user_id = user.get("id") or user.get("supabase_user_id")

    if not user_id:
        from flask import current_app
        if current_app:
            current_app.logger.error("‚ùå USER_ID √â NONE - Usu√°rio n√£o autenticado ou sess√£o inv√°lida")
        return None

    # Removido log desnecess√°rio de user_id em cada requisi√ß√£o

    return user_id

def require_valid_user():
    """
    DECORATOR: For√ßa autentica√ß√£o v√°lida para rotas cr√≠ticas.
    Bloqueia acesso se n√£o h√° user_id v√°lido na sess√£o.
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            user_id = get_current_user_id()
            if not user_id:
                current_app.logger.error("SECURITY: Bloqueando acesso a %s - sem user_id v√°lido", request.endpoint)
                abort(403, "Acesso negado: sess√£o inv√°lida")

            # Armazenar user_id no contexto da requisi√ß√£o para logs
            g.current_user_id = user_id
            g.security_check_time = time.time()

            current_app.logger.info("SECURITY: Acesso autorizado a %s para user_id: %s", request.endpoint, user_id)
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def log_data_access(table_name, action, user_id=None, record_count=None):
    """
    AUDITORIA: Log todos os acessos a dados para detectar vazamentos.
    """
    user_id = user_id or get_current_user_id()
    current_app.logger.info("AUDIT: %s em %s - user_id: %s - registros: %s - endpoint: %s",
                           action, table_name, user_id, record_count, request.endpoint)

def secure_supabase_query(supabase_client, table_name, action="SELECT"):
    """
    WRAPPER SEGURO: Garante que todas as queries filtrem por user_id.
    """
    if not supabase_client:
        current_app.logger.error("SECURITY: Cliente Supabase None em opera√ß√£o %s na tabela %s", action, table_name)
        return None

    user_id = get_current_user_id()
    if not user_id:
        current_app.logger.error("SECURITY: Tentativa de acesso sem user_id v√°lido - tabela: %s", table_name)
        return None

    # Log da opera√ß√£o para auditoria
    log_data_access(table_name, action, user_id)

    return supabase_client.table(table_name)

class SecurityError(Exception):
    """Exce√ß√£o para viola√ß√µes de seguran√ßa."""
    pass

def validate_user_owns_record(supabase_client, table_name, record_id, user_id=None):
    """
    VALIDA√á√ÉO: Verifica se usu√°rio √© dono do registro antes de opera√ß√µes.
    """
    user_id = user_id or get_current_user_id()
    if not user_id:
        raise SecurityError("Usu√°rio n√£o autenticado")

    try:
        result = supabase_client.table(table_name).select("user_id").eq("id", record_id).limit(1).execute()

        if not result.data:
            raise SecurityError(f"Registro {record_id} n√£o encontrado na tabela {table_name}")

        record_owner = result.data[0].get("user_id")
        if record_owner != user_id:
            current_app.logger.error("SECURITY: TENTATIVA DE ACESSO INDEVIDO - user_id: %s tentou acessar registro de %s na tabela %s",
                                   user_id, record_owner, table_name)
            raise SecurityError("Acesso negado: registro pertence a outro usu√°rio")

        return True

    except Exception as e:
        current_app.logger.error("SECURITY: Erro na valida√ß√£o de propriedade: %s", e)
        raise SecurityError("Erro na valida√ß√£o de seguran√ßa")

def init_security_middleware(app):
    """
    INICIALIZA√á√ÉO: Registra middleware de seguran√ßa global.
    """
    @app.before_request
    def security_before_request():
        # Apenas auditoria silenciosa - deixar @login_required das views fazer a prote√ß√£o
        if request.endpoint and not request.endpoint.startswith('static'):
            user_id = get_current_user_id()
            if user_id:
                # Armazenar user_id no contexto para logs
                g.current_user_id = user_id
                g.security_check_time = time.time()
                # Log apenas para rotas cr√≠ticas
                if any(route in request.endpoint for route in ['clientes', 'dashboard', 'alocacoes']):
                    app.logger.info("AUDIT: %s acessado por user_id: %s", request.endpoint, user_id)

    @app.after_request
    def security_after_request(response):
        # Log de auditoria ap√≥s cada requisi√ß√£o
        if hasattr(g, 'current_user_id'):
            duration = time.time() - g.security_check_time
            app.logger.info("AUDIT: Requisi√ß√£o conclu√≠da - user_id: %s - dura√ß√£o: %.3fs - status: %s",
                                   g.current_user_id, duration, response.status_code)
        return response

    # Log de inicializa√ß√£o usando o logger da app diretamente
    app.logger.info("SECURITY: Middleware de seguran√ßa inicializado")